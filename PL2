# include <stdio.h>
# include <stdlib.h>
# include <iostream>
# include <string.h>


using namespace std ;

typedef char Str100[ 1500 ] ;

struct Inside{
  Str100 linetoken ; // reg function 裡面的變數 token
  Inside * next ;
} ; // Inside()

typedef Inside * InformationInside ;

struct Range{
  InformationInside nexthead ;
  InformationInside nexttail ;
  Range * up ; // 到上一個表格
  Range * down ; // 到下一個表格
} ; // Range()

typedef Range * InformationRange ;


struct Data {
  Str100 name ; // 名稱
  Str100 type ; // 型別
  int constantnum ; // 是否有沒有constatunm
  InformationInside linehead ; // 接function 的頭
  InformationInside linetail ; // 接function 的尾
  bool functionToF ; // 判斷它是不是function
  bool repeatTorF ; // 判斷它是不是重複
  InformationRange rangehead ; // 接range的頭
  InformationRange rangetail ; // 接range的尾巴
} ;// Data()


typedef Data Information ;
Information gtable[ 1000 ] ;

Str100 gtemp ; // 切下來的token
char gch = '\0' ; // 用來切的token字元
int gTestNum ; // 題號
int gtablenum ; // table總數
int gtablenow ; // 目前位置
int gerrorline ; // 錯誤行數
int giftokenenter ; // 用來判斷下一個token 之前有幾個enter
bool gN_GT ; // 用來是否要拿下一個Token
bool gSave_token ; // 用來控制是否要開始做存入
bool gfirstinexpression ; // 用來判斷是不是第一次進入expression
bool gnoteenter ; // 有可能是一堆住解後面直接接enter

void GetToken() ; // 拿下一個Token
int WhatType() ; // 字元是什麼型別
bool CheckToken( char ch ) ; // 確認字串類別
bool CheckNumToken( char ch ) ; // 確認數字類別
void String() ; // 切出字串
void Number() ; // 切出數字
void Symbol() ; // 切出符號
bool Sign() ; // + - !
bool Assignment_operator() ; // = TDRPM(D)
bool Is_Identifier() ; // 確認是否為Identifier
bool Is_Constant() ; // 確認是否為Constant
void SaveToken() ; // 這是用來存放function的token
int InBuildFunction() ; // 內建功能
void CleanAllrepeat() ; // 因為一開始一定沒有重複 所以要全部set false
void DoRepeat() ; // 處理重複
void Clean_Arrary() ; // 錯誤要清理
bool Check_Not_Function_Id() ; // 找尋有無這個Identifier
bool Cin() ; // 讀入
bool Cout() ; // 輸出
void ListAllVariables() ; // 列出所有變數
void ListAllFunctions() ; // 列出所有function
void ListVariable() ; // 列出變數
void ListFunction() ; // 列出function
bool GoDefinition() ; // 是否會進去定義
void SaveReg() ; // 儲存reg
void Setanewtable() ; // 給他一個reg表格
void DeletTable() ; // 刪除一個reg表格
bool InsideIDcheck() ; // 第2到多層檢查
void HisaSytle( int i ) ; // 夏氏風格
void Resit() ; // 洗白
// --------以上是判斷類別------------------

void User_input() ;
bool Definition() ;
bool Type_specifier() ;
bool Function_definition_or_declarators() ;
bool Rest_of_declarators() ;
bool Rest_of_declarators_of_rage() ;
bool Function_definition_without_ID() ;
bool Formal_parameter_list() ;
bool Compound_statement() ;
bool Declaration() ;

// ----------part1---------------------

bool Statement() ;
bool Expression() ;
bool Rest_of_expression() ;
bool Basic_expression() ;
bool Rest_of_Identifier_started_basic_exp() ;
bool Rest_of_PPMM_Identifier_started_basic_exp() ;
bool Signed_basic_expression() ;
bool Rest_of_Identifier_started_signed_basic_exp() ;
bool Actual_parameter_list() ;
bool Non_comma_expression() ;
bool Rest_of_non_comma_expression() ;
// ---------------part2-------------------
bool Rest_of_maybe_logical_OR_exp() ;
bool Maybe_logical_AND_exp() ;
bool Rest_of_maybe_logical_AND_exp() ;
bool Maybe_bit_OR_exp() ;
bool Rest_of_maybe_bit_OR_exp() ;
bool Maybe_bit_ex_OR_exp() ;
bool Rest_of_maybe_bit_ex_OR_exp() ;
bool Maybe_bit_AND_exp() ;
bool Rest_of_maybe_bit_AND_exp() ;
bool Maybe_equality_exp() ;
bool Rest_of_maybe_equality_exp() ;
bool Maybe_relational_exp() ;
bool Rest_of_maybe_relational_exp() ;
bool Maybe_shift_exp() ;
bool Rest_of_maybe_shift_exp() ;
bool Maybe_additive_exp() ;
bool Rest_of_maybe_additive_exp() ;
bool Maybe_mult_exp() ;
bool Rest_of_maybe_mult_exp() ;
bool Unary_exp() ;
bool Signed_unary_exp() ;
bool Rest_of_Identifier_started_unary_exp() ;




int main() {
  cin >> gTestNum ;
  scanf( "%c", &gch ) ;

  cout << "Our-C running ..." << "\n" ;
  User_input() ;
  cout << "> Our-C exited ..." << "\n"  ;
  return (EXIT_SUCCESS);
} // main()

void GetToken() {
  int type = 0 ; // 型別判斷的int

  // giftokenenter = 0 ;
  bool codeQuit = false ;
  memset( gtemp, '\0', sizeof(gtemp) ); // 使用前先清空

  if ( gnoteenter ) ; // 註解的狀況不能歸零
  else giftokenenter = 0 ; //
  while ( ( gch == ' ' || gch == '\n' || gch == '\t' || gch == '\0' || gch == '\r' ) && codeQuit != true ) {
    if ( gch == '\n' )
      giftokenenter = giftokenenter + 1 ;
    if ( gch == '\n' )
      gerrorline = gerrorline + 1 ;
    if ( scanf( "%c", &gch ) == EOF )
      codeQuit = true ;
  } // while()

  type = WhatType() ; // 型別判斷

  if ( type == 1 ) // 字串
    String() ;
  else if ( type == 2 ) // 數字
    Number() ;
  else if ( type == 3 ) // 符號
    Symbol() ;
} // GetToken()

int WhatType() {
  if ( gch >= 65 && gch <= 90 ) // 小寫
    return 1 ;
  else if ( gch >= 97 && gch <= 122 ) // 大寫
    return 1 ;
  else if ( gch >= 48 && gch <= 57 ) // 數字
    return 2 ;
  else if ( gch == '_' ) // 底線開頭的字串
    return 1 ;
  else if ( gch == '\n' || gch == ' ' || gch == '\t' || gch == '\0' ) // 不用存的token
    return 4 ;
  else if ( gch == '\r' )
    return 4 ;
  else // 符號
    return 3 ;
} // WhatType()

bool CheckToken( char ch ) {
  if ( ch >= 65 && ch <= 90 ) // 小寫
    return true ;
  else if ( ch >= 97 && ch <= 122 ) // 大寫
    return true ;
  else if ( ch >= 48 && ch <= 57 ) // 數字
    return true ;
  else if ( ch == '_' ) // 底線開頭的字串
    return true ;
  else // 不是字串應該出現的東西
    return false ;
} // CheckToken()

bool CheckNumToken( char ch ) {
  if ( ch >= 48 && ch <= 57 ) // 數字
    return true ;
  else if ( ch == '.' ) // 可能有小數的狀況
    return true ;
  else if ( ch >= 65 && ch <= 90 ) // 小寫不應該出現在數字裡
    return false ;
  else if ( ch >= 97 && ch <= 122 ) // 小寫不應該出現在數字裡
    return false ;
  else // 不是數字應該出現的東西
    return false ;
} // CheckNumToken()

void String() {
  bool codeQuit = false ;

  while ( CheckToken( gch ) != false && codeQuit != true ) {
    gtemp[strlen( gtemp )] = gch ;
    if ( scanf( "%c", &gch ) == EOF )
      codeQuit = true ;
  } // while()

  if ( gSave_token ) SaveToken() ; // 可能要放存入的位置
} // String()

void Number() {
  bool codeQuit = false ;
  int count = 0 ;
  while ( CheckNumToken( gch ) != false && codeQuit != true && count <= 1 ) {
    gtemp[strlen( gtemp )] = gch ;
    if ( scanf( "%c", &gch ) == EOF ) {
      codeQuit = true ;
    } // if()

    if ( gch == '.' ) count = count + 1 ; // !!注意他只能有一個小數點
  } // while()

  if ( gSave_token ) SaveToken() ; // 可能要放存入的位置
} // Number()

void Symbol() {
  bool store = false ;
  if ( gch == '<' ) {
    gtemp[strlen( gtemp )] = gch ;
    scanf( "%c", &gch ) ;
    if ( gch == '=' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // if()

    else if ( gch == '<' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // else if()
  } // if()
  // ----------------------(<= << )-------------------------
  else if ( gch == '>' ) {
    gtemp[strlen( gtemp )] = gch ;
    scanf( "%c", &gch ) ;
    if ( gch == '=' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // if()

    else if ( gch == '>' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // else if()
  } // else if()
  // ------------------------( >= >> )----------------------------
  else if ( gch == '/' ) {
    gtemp[strlen( gtemp )] = gch ;
    scanf( "%c", &gch ) ;
    if ( gch == '=' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // if()
    else if ( gch == '/' ) {
      memset( gtemp, '\0', sizeof(gtemp) );
      while ( gch != '\n' )
        scanf( "%c", &gch ) ;
      store = true ;
      gnoteenter = true ;
      GetToken() ;
    } // else if()
  } // else if()
  // -----------------------( // /=)-------------------------------------
  else if ( gch == '+' ) {
    gtemp[strlen( gtemp )] = gch ;
    scanf( "%c", &gch ) ;
    if ( gch == '=' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // if()
    else if ( gch == '+' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // else if()
  } // else if()
  // -------------------( += ++ )---------------------------------
  else if ( gch == '-' ) {
    gtemp[strlen( gtemp )] = gch ;
    scanf( "%c", &gch ) ;
    if ( gch == '=' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // if()

    else if ( gch == '-' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // else if()
  } // else if()
  // ----------------( -= -- )------------------
  else if ( gch == '!' || gch == '*' || gch == '%' ) {
    gtemp[strlen( gtemp )] = gch ;
    scanf( "%c", &gch ) ;
    if ( gch == '=' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // if()
  } // else if()
  // ---------------( != *= /= %= )-------------------
  else if ( gch == '=' ) {
    gtemp[strlen( gtemp )] = gch ;
    scanf( "%c", &gch ) ;
    if ( gch == '=' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // if()
  } // else if()
  // ---------------( == )-------------------------
  else if ( gch == '|' ) {
    gtemp[strlen( gtemp )] = gch ;
    scanf( "%c", &gch ) ;
    if ( gch == '|' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // if()
  } // else if()
  // ---------------( || )-------------------------
  else if ( gch == '&' ) {
    gtemp[strlen( gtemp )] = gch ;
    scanf( "%c", &gch ) ;
    if ( gch == '&' ) {
      gtemp[strlen( gtemp )] = gch ;
      gch = '\0' ;
    } // if()
  } // else if()
  // ---------------( && )-------------------------
  else if ( gch == '"' ) {
    gtemp[strlen( gtemp )] = gch ;
    scanf( "%c", &gch ) ;
    while ( gch != '"' ) {
      gtemp[strlen( gtemp )] = gch ;
      scanf( "%c", &gch ) ;
      if (  gch == '"' ) gtemp[strlen( gtemp )] = gch ;
    } // while()

    gch = '\0' ;
  } // else if()
  // --------------------( "sadasdasd" )
  else if ( gch == '\'' ) {
    gtemp[strlen( gtemp )] = gch ;
    scanf( "%c", &gch ) ;
    while ( gch != '\'' ) {
      gtemp[strlen( gtemp )] = gch ;
      scanf( "%c", &gch ) ;
      if (  gch == '\'' ) gtemp[strlen( gtemp )] = gch ;
    } // while()

    gch = '\0' ;
  } // else if()
  // ----------------------------( 's' )
  else {
    gtemp[strlen( gtemp )] = gch ;
    gch = '\0' ;
  } // else()

  if ( gSave_token && !store ) SaveToken() ; // 可能要放存入的位置
} // Symbol()

bool Sign() {
  if ( strcmp( gtemp, "-" ) == 0 ) { // 減號的狀況
    return true;
  } // if ( strcmp( gtemp, "-" ) == 0 )
  else if ( strcmp( gtemp, "+" ) == 0 ) { // 加號的狀況
    return true;
  } // else if ( strcmp( gtemp, "+" ) == 0 )
  else if ( strcmp( gtemp, "!" ) == 0 ) { // !號的狀況
    return true;
  } // else if ( strcmp( gtemp, "!" ) == 0 )
  else {
    return false;
  } // else

} // Sign()

bool Assignment_operator() {
  if ( strcmp( gtemp, "=" ) == 0 ) { // =的狀況
    return true;
  } // if ( strcmp( gtemp, "=" ) == 0 )
  else if ( strcmp( gtemp, "*=" ) == 0 ) { // TE的狀況
    return true;
  } // else if ( strcmp( gtemp, "*=" ) == 0 )
  else if ( strcmp( gtemp, "/=" ) == 0 ) { // DE的狀況
    return true;
  } // else if ( strcmp( gtemp, "/=" ) == 0 )
  else if ( strcmp( gtemp, "%=" ) == 0 ) { // RE的狀況
    return true;
  } // else if ( strcmp( gtemp, "%=" ) == 0 )
  else if ( strcmp( gtemp, "+=" ) == 0 ) { // PE的狀況
    return true;
  } // else if ( strcmp( gtemp, "+=" ) == 0 )
  else if ( strcmp( gtemp, "-=" ) == 0 ) { // ME的狀況
    return true;
  } // else if ( strcmp( gtemp, "-=" ) == 0 )
  else {
    return false;
  } // else

} // Assignment_operator()

bool Is_Identifier() {
  if ( strcmp( gtemp, "true" ) == 0 || strcmp( gtemp, "false" ) == 0 || strcmp( gtemp, "int" ) == 0 ||
       strcmp( gtemp, "float" ) == 0 || strcmp( gtemp, "char" ) == 0 || strcmp( gtemp, "bool" ) == 0 ||
       strcmp( gtemp, "string" ) == 0 || strcmp( gtemp, "void" ) == 0 || strcmp( gtemp, "if" ) == 0 ||
       strcmp( gtemp, "else" ) == 0 || strcmp( gtemp, "while" ) == 0 || strcmp( gtemp, "return" ) == 0 ||
       strcmp( gtemp, "cout" ) == 0 || strcmp( gtemp, "cin" ) == 0 || strcmp( gtemp, "do" ) == 0 )
    return false ; // 字串不能等於這些命令字串
  else if (  gtemp[0] == '_' ) return true ; // 底線開頭

  else if ( gtemp[0] >= 65 && gtemp[0] <= 90 ) return true ; // 大小寫開頭

  else if ( gtemp[0] >= 97 && gtemp[0] <= 122 ) return true ; // 大小寫開頭

  else
    return false ;
} // Is_Identifier()

bool Is_Constant() {
  if ( strcmp( gtemp, "true" ) == 0 ) return true ; // true 的字串
  else if ( strcmp( gtemp, "false" ) == 0 ) return true ; // fasle 的字串
  else if ( gtemp[0] == '"' ) return true ; // 雙扣的結果
  else if ( gtemp[0] == '\'' ) return true ; // 雙點的結果
  else if ( gtemp[0] >= 48 && gtemp[0] <= 57 ) return true ; // 字頭是否在數字範圍的結果
  else return false ; // 都不是的結果
} // Is_Constant()

bool Type_specifier() { // 是這5種類別
  if ( strcmp( gtemp, "int" ) == 0 || strcmp( gtemp, "float" ) == 0 || strcmp( gtemp, "char" ) == 0 ||
       strcmp( gtemp, "bool" ) == 0 || strcmp( gtemp, "string" ) == 0 )  {
    return true ;
  } // if()

  else
    return false ;
} // Type_specifier()

// -----------------------------------------------------------------------------

void SaveToken() { // 存放function的token

  InformationInside temp = NULL ;
  temp = new Inside ;
  strcpy( temp -> linetoken, gtemp ) ;
  temp -> next = NULL ;

  if ( gtable[gtablenum].linehead == NULL ) { // head = null
    gtable[gtablenum].linehead = temp ;
    gtable[gtablenum].linetail =  gtable[gtablenum].linehead ;
  } // if ()

  else { // head != null
    gtable[gtablenum].linetail -> next = temp ;
    gtable[gtablenum].linetail = temp ;
  } // else


} // SaveToken()

// -----------------------------------------------------------------------------

void SaveReg() {
  InformationInside temp = NULL ;
  temp = new Inside ;
  strcpy( temp -> linetoken, gtemp ) ;
  temp -> next = NULL ;

  if ( gtable[gtablenum].rangetail -> nexthead == NULL ) {
    gtable[gtablenum].rangetail -> nexthead = temp ;
    gtable[gtablenum].rangetail -> nexttail = temp ;
  } // if ()

  else {
    gtable[gtablenum].rangetail -> nexttail -> next = temp ;
    gtable[gtablenum].rangetail -> nexttail = temp ;
  } // else


} // SaveReg()

// -----------------------------------------------------------------------------

void Setanewtable() {
  InformationRange temp = NULL ;
  temp = new Range ;
  temp -> nexthead = NULL ;
  temp -> nexttail = NULL ;
  temp -> up = NULL ;
  temp -> down = NULL ;

  if ( gtable[gtablenum].rangehead == NULL ) {
    gtable[gtablenum].rangehead = temp ;
    gtable[gtablenum].rangetail = temp ;
  } // if()

  else {
    temp -> up = gtable[gtablenum].rangetail ;
    gtable[gtablenum].rangetail -> down = temp ;
    gtable[gtablenum].rangetail = temp ;
  } // else

} // Setanewtable()

// -----------------------------------------------------------------------------

void DeletTable() {
  if ( gtable[gtablenum].rangetail -> up == NULL ) {

    gtable[gtablenum].rangetail = NULL ;
  } // if()

  else {
    gtable[gtablenum].rangetail = gtable[gtablenum].rangetail -> up ;
    gtable[gtablenum].rangetail -> down = NULL ;
  } // else

} // DeletTable()

// -----------------------------------------------------------------------------

bool InsideIDcheck() {
  for ( InformationRange temp = gtable[gtablenum].rangehead ; temp != NULL ; temp = temp -> down ) {
    for ( InformationInside temp2 = temp -> nexthead ; temp2 != NULL ; temp2 = temp2 -> next ) {
      if ( strcmp( temp2 -> linetoken, gtemp ) == 0 ) return true ;
    } // for()
  } // for()

  return false ;
} // InsideIDcheck()

// -----------------------------------------------------------------------------
int InBuildFunction() {

  if ( strcmp( gtemp, "ListAllVariables" ) == 0 ) {
    GetToken() ;
    GetToken() ;
    GetToken() ;
    ListAllVariables() ;
    return 2 ;
  } // if ( strcmp( gtemp, "ListAllVariables" ) == 0 )

  else if ( strcmp( gtemp, "ListAllFunctions" ) == 0 ) {
    GetToken() ;
    GetToken() ;
    GetToken() ;
    ListAllFunctions() ;
    return 2 ;
  } // else if ( strcmp( gtemp, "ListAllFunctions" ) == 0 )

  else if ( strcmp( gtemp, "ListVariable" ) == 0 ) {
    GetToken() ;
    GetToken() ;
    ListVariable() ;
    GetToken() ;
    GetToken() ;
    return 2 ;
  } // else if ( strcmp( gtemp, "ListVariable" ) == 0 )

  else if ( strcmp( gtemp, "ListFunction" ) == 0 ) {
    GetToken() ;
    GetToken() ;
    ListFunction() ;
    GetToken() ;
    GetToken() ;
    return 2 ;
  } // else if ( strcmp( gtemp, "ListFunction" ) == 0 )
  else if ( strcmp( gtemp, "Done" ) == 0 ) {
    GetToken() ;
    GetToken() ;
    GetToken() ;
    return -1 ;
  } // else if ( strcmp( gtemp, "Done" ) == 0 )

  else return 1 ;
} // InBuildFunction()

// -----------------------------------------------------------------------------
void CleanAllrepeat() {
  for ( int i = 0 ; i < gtablenum ; i++ )
    gtable[i].repeatTorF = false ; // 重置repeat
} // CleanAllrepeat()
// -----------------------------------------------------------------------------

void DoRepeat() {
  int temp_gtablenow = gtablenow ;
  int temp_gtablenum =  gtablenum ;

  for ( int i = 0 ; i < gtablenow ; i++ )  {
    if ( gtable[i].repeatTorF ) {
      for ( int j = i ; j < gtablenum - 1 ; j++ ) {
        gtable[j].linehead = gtable[j+1].linehead ; // head
        gtable[j].linetail = gtable[j+1].linetail ; // tail
        gtable[j].rangehead = gtable[j+1].rangehead ; // head
        gtable[j].rangetail = gtable[j+1].rangetail; // tail
        gtable[j].constantnum = gtable[j+1].constantnum ; // constantnum
        strcpy( gtable[j].name, gtable[j+1].name ) ; // naem
        strcpy( gtable[j].type, gtable[j+1].type ) ; // type
        gtable[j].repeatTorF = gtable[j+1].repeatTorF ; // repeat
        gtable[j].functionToF = gtable[j+1].functionToF ; // is function or not
      } // for ( j = i ; j < total - 1 ; j++ )

      gtablenow = gtablenow -1 ; // 因為全部處理完要扣一
      gtablenum = gtablenum -1 ; // 因為全部處理完要扣一
      i = i - 1 ; // 因為全部處理完要扣一
    } // if ( gtable[i].isrepeat )
  } // for (int i = 0 ; i < gtablenow ; i++ )

} // DoRepeat()

// -----------------------------------------------------------------------------
void Clean_Arrary() {
  for ( int i = gtablenow ; i < gtablenum ; i++ ) { // 錯誤要初始化
    gtable[i].linehead = NULL ;
    gtable[i].linetail = NULL ;
    gtable[i].rangehead = NULL ;
    gtable[i].rangetail = NULL ;
    gtable[i].constantnum = 0 ;
    strcpy( gtable[i].name, "" ) ;
    strcpy( gtable[i].type, "" ) ;
    gtable[i].repeatTorF = false ;
    gtable[i].functionToF = false ;
  } // for()
} // Clean_Arrary()
// ------------------------------------------------------------------------------

void Resit() {
  gerrorline = 0 ;
  gnoteenter = false ;
  gtable[gtablenum].linehead = NULL ;
  gtable[gtablenum].linetail =  NULL ;
  gtable[gtablenum].rangehead = NULL ;
  gtable[gtablenum].rangetail =  NULL ;
} // Resit()


// -----------------------------------------------------------------------------
bool Check_Not_Function_Id() {
  for ( int i = 0 ; i < gtablenum ; i++ ) {
    if ( strcmp( gtable[i].name, gtemp ) == 0 ) {
      if ( !gtable[gtablenum].functionToF )  return true ;
    } // if ( strcmp( gtable[i].name, gtemp ) == 0 )
  } // for( int i = 0 ; i < gtablenum ; i++ )

  return false ;
} // Check_Not_Function_Id()
// ------------------------------------------------------------------------------

// -----------------------------------------------------------------------------
bool Cin() {
  while ( strcmp( gtemp, ">>" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( Is_Identifier() ) {
      if ( gfirstinexpression ) {
        if ( !Check_Not_Function_Id() ) return false ;
      } // if ()

      else {
        if ( Check_Not_Function_Id() || InsideIDcheck() ) ;
        else return false ;
      } // else

      gN_GT = true ;
    } // if()

    else return false ;

    GetToken() ;
    if ( strcmp( gtemp, "[" ) == 0 ) {
      gN_GT = true ;
      GetToken() ;
      if ( Is_Identifier() ) {
        if ( gfirstinexpression ) {
          if ( !Check_Not_Function_Id() ) return false ;
        } // if ()

        else {
          if ( Check_Not_Function_Id() || InsideIDcheck() ) ;
          else return false ;
        } // else

        gN_GT = true ;
        GetToken() ;
      } // if()

      else if ( Is_Constant() ) {
        gN_GT = true ;
        GetToken() ;
      } // else if ()

      else return false ;

      while ( strcmp( gtemp, "+" ) == 0 || strcmp( gtemp, "-" ) == 0 ) {
        gN_GT = true ;
        GetToken() ;
        if ( Is_Identifier() ) {
          if ( gfirstinexpression ) {
            if ( !Check_Not_Function_Id() ) return false ;
          } // if ()

          else {
            if ( Check_Not_Function_Id() || InsideIDcheck() ) ;
            else return false ;
          } // else

          gN_GT = true ;
          GetToken() ;
        } // if()

        else if ( Is_Constant() ) {
          gN_GT = true ;
          GetToken() ;
        } // else if ()

        else return false ;

        if ( gN_GT ) GetToken() ;
      } // while()

      gN_GT = false ;

      if ( strcmp( gtemp, "]" ) != 0 ) return false ;
      gN_GT = true ;
    } // if()
    else gN_GT = false ;

    if ( gN_GT ) GetToken() ;
  } // while ( strcmp( gtemp, ">>" ) == 0 )

  gN_GT = false ;

  if ( strcmp( gtemp, ";" ) == 0 ) {
    gN_GT = true ;
    return true ;
  } // if ( strcmp( gtemp, ";" ) == 0 )
  else return false ;
} // Cin()
// ------------------------------------------------------------------------------

// -----------------------------------------------------------------------------
bool Cout() {
  while ( strcmp( gtemp, "<<" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;

    if ( Expression() ) ;
    else return false ;

    if ( gN_GT ) GetToken() ;
  } // while ( strcmp( gtemp, "<<" ) == 0 )

  gN_GT = false ;

  if ( strcmp( gtemp, ";" ) == 0 ) {
    gN_GT = true ;
    return true ;
  } // if ( strcmp( gtemp, ";" ) == 0 )
  else return false ;
} // Cout()
// ------------------------------------------------------------------------------


// -----------------------------------------------------------------------------
void ListAllVariables() {
  Information temp[ 1 ] ;
  for ( int i = 0 ; i < gtablenum ; i++ ) {
    for ( int j = 0 ; j < gtablenum - i - 1 ; j++ ) {
      if ( strcmp( gtable[j].name, gtable[j+1].name ) > 0 ) {
        temp[0] = gtable[j] ;
        gtable[j] = gtable[j+1] ;
        gtable[j+1] = temp[0] ;
      } // if ( strcmp( gtable[j].name, gtable[j+1].name ) > 0 )
    } // for ( int j = 0 ; j < gtablenum - 1 ; j++ )
  } // for ( int i = 0 ; i < gtablenum ; i++ )

  cout << "> " ;
  for ( int i = 0 ; i < gtablenum ; i++ ) {
    if ( !gtable[i].functionToF )
      cout << gtable[i].name << "\n" ;
  } // for ( int i = 0 ; i < gtablenum ; i++ )

  cout << "Statement executed ..." << "\n" ;
} // ListAllVariables()
// ------------------------------------------------------------------------------

// -----------------------------------------------------------------------------
void ListAllFunctions() {
  Information temp[ 1 ] ;
  for ( int i = 0 ; i < gtablenum ; i++ ) {
    for ( int j = 0 ; j < gtablenum - i - 1 ; j++ ) {
      if ( strcmp( gtable[j].name, gtable[j+1].name ) > 0 ) {
        temp[0] = gtable[j] ;
        gtable[j] = gtable[j+1] ;
        gtable[j+1] = temp[0] ;
      } // if ( strcmp( gtable[j].name, gtable[j+1].name ) > 0 )
    } // for ( int j = 0 ; j < gtablenum - 1 ; j++ )
  } // for ( int i = 0 ; i < gtablenum ; i++ )

  cout << "> " ;
  for ( int i = 0 ; i < gtablenum ; i++ ) {
    if ( gtable[i].functionToF )
      cout << gtable[i].name << "()" << "\n" ;
  } // for ( int i = 0 ; i < gtablenum ; i++ )

  cout << "Statement executed ..." << "\n" ;
} // ListAllFunctions()
// ------------------------------------------------------------------------------

// -----------------------------------------------------------------------------
void ListVariable() {
  Str100 temp ;
  memset( temp, '\0', sizeof(temp) );
  for ( int i = 1 ; i < strlen( gtemp ) - 1 ; i++ )
    temp[strlen( temp )] = gtemp[i] ;

  for ( int j = 0 ; j < gtablenum ; j++ ) {
    if ( strcmp( temp, gtable[j].name ) == 0 ) {
      cout << "> " << gtable[j].type << " " << gtable[j].name ;
      if ( gtable[j].constantnum != 0 )
        cout << "[ " << gtable[j].constantnum << " ]" << " ;" << "\n" ;
      else
        cout << " ;" << "\n" ;
    } // if ( strcmp( temp, gtable[i].name ) == 0 )
  } // for ( int j = 0 ; j < gtablenum ; j++ )

  cout << "Statement executed ..." << "\n" ;
} // ListVariable()
// ------------------------------------------------------------------------------

// -----------------------------------------------------------------------------
void ListFunction() {
  Str100 temp ;
  memset( temp, '\0', sizeof(temp) );
  for ( int i = 1 ; i < strlen( gtemp ) - 1 ; i++ )
    temp[strlen( temp )] = gtemp[i] ;

  for ( int j = 0 ; j < gtablenum ; j++ ) {
    if ( strcmp( temp, gtable[j].name ) == 0 ) {
      HisaSytle( j ) ;
    } // if ( strcmp( temp, gtable[i].name ) == 0 )
  } // for ( int j = 0 ; j < gtablenum ; j++ )

  cout << "Statement executed ..." << "\n" ;
} // ListFunction()
// ------------------------------------------------------------------------------
void HisaSytle( int i ) {
  InformationInside temp2 ;
  temp2 = new Inside ;
  temp2 -> next = NULL ;
  int num = 0 ;
  int cont ;
  cout << "> " ;
  for ( InformationInside temp = gtable[i].linehead ; temp != NULL ; temp = temp -> next ) {
    if ( temp -> next != NULL )
      temp2 = temp ;
    if ( strcmp( temp2 -> next -> linetoken, "(" ) == 0 ||
         strcmp( temp2 -> next -> linetoken, "[" ) == 0 ||
         strcmp( temp2 -> next -> linetoken, "++" ) == 0 ||
         strcmp( temp2 -> next -> linetoken, "--" ) == 0 ||
         strcmp( temp2 -> next -> linetoken, "," ) == 0 ) {

      if ( strcmp( temp -> linetoken, "while" ) == 0 ||
           strcmp( temp -> linetoken, "if" ) == 0 )
        cout << temp -> linetoken << " " ;
      else
        cout << temp -> linetoken  ;

    } // if()

    else {
      if ( strcmp( temp -> linetoken, "{" ) == 0 ) {
        cont = cont + 1 ;
        num = num + 2 ;
        cout << temp -> linetoken << "\n" ;
        for ( int i = 0 ; i < num ; i++ )
          cout << " " ;
      } // if()

      else if ( strcmp( temp -> linetoken, ";" ) == 0 ) {
        cout << temp -> linetoken << "\n" ;
        if ( strcmp( temp2 -> next -> linetoken, "}" ) != 0 ) {
          for ( int i = 0 ; i < num ; i++ )
            cout << " " ;
        } // if()

        else {
          if ( cont > 1 ) {
            for ( int i = 0 ; i < num-2 ; i++ )
              cout << " " ;
          } // if()
        } // else
      } // else if()

      else if ( strcmp( temp -> linetoken, "}" ) == 0 ) {
        cont = cont - 1 ;
        num = num - 2 ;
        cout << temp -> linetoken << "\n" ;
        if ( strcmp( temp2 -> next -> linetoken, "}" ) != 0 ) {
          for ( int i = 0 ; i < num ; i++ )
            cout << " " ;
        } // if()

        else {
          if ( cont > 1 ) {
            for ( int i = 0 ; i < num-2 ; i++ )
              cout << " " ;
          } // if()
        } // else
      } // else if()

      else
        cout << temp -> linetoken << " " ;
    } // else

  } // for()


} // HisaSytle()
// ------------------------------------------------------------------------------

bool GoDefinition() {
  if ( strcmp( gtemp, "int" ) == 0 || strcmp( gtemp, "float" ) == 0 ||
       strcmp( gtemp, "char" ) == 0 || strcmp( gtemp, "bool" ) == 0 ||
       strcmp( gtemp, "string" ) == 0 || strcmp( gtemp, "void" ) == 0 )
    return true ;

  else
    return false ;
} // GoDefinition()

// ------------------------------------------------------------------------------

void User_input() {
  int control_InBuildFunction = 0 ;
  int tenpenter = 0 ;
  GetToken() ;
  control_InBuildFunction = InBuildFunction() ;

  while ( control_InBuildFunction  != -1 ) {

    if ( control_InBuildFunction  == 1 ) {
      CleanAllrepeat() ;

      if ( GoDefinition() ) {
        gtablenow = gtablenum ;
        if ( Definition() ) {
          gtablenum = gtablenum + 1  ;
          DoRepeat() ;
          cout << "> " ;
          for ( int i = gtablenow ; i < gtablenum ; i++ ) {
            if ( !gtable[i].repeatTorF ) {
              if ( !gtable[i].functionToF )
                cout << "Definition of " << gtable[i].name <<  " entered ..." << "\n" ;
              else
                cout << "Definition of " << gtable[i].name <<  "() entered ..." << "\n" ;
            } // if()

            else {
              if ( !gtable[i].functionToF )
                cout << "New definition of " << gtable[i].name <<  " entered ..." << "\n" ;
              else
                cout << "New definition of " << gtable[i].name <<  "() entered ..." << "\n" ;
            } // else

          } // for()

          gnoteenter = false ;
        } // if( Definition() )

        else {
          gerrorline = gerrorline + tenpenter ;
          cout << "> line " << gerrorline << " : syntax error when token is '" << gtemp << "'" << "\n" ;
          while ( gch != '\n' ) {
            scanf( "%c", &gch ) ;
          } // while ()

          gN_GT = true ;
          Clean_Arrary() ;
          gtablenum = gtablenow ;
        } // else
      } // if( strcmp( gtemp, "int" ) == 0 || strcmp( gtemp, "float" ) == 0 || strcmp( gtemp, "char" ) == 0 )

      else {
        if ( strcmp( gtemp, ";" ) != 0 && strcmp( gtemp, "return" ) != 0 &&
             strcmp( gtemp, "if" ) != 0 && strcmp( gtemp, "while" ) != 0 &&
             strcmp( gtemp, "do" ) != 0 && strcmp( gtemp, "{" ) != 0  )
          gfirstinexpression = true ;


        if ( Statement() ) {
          cout << "> Statement executed ..." << "\n" ;

          gnoteenter = false ;
        } // if ( Statement() )

        else {
          gerrorline = gerrorline + tenpenter ;
          cout << "> line " << gerrorline << " : syntax error when token is '" << gtemp << "'" << "\n" ;
          while ( gch != '\n' ) {
            scanf( "%c", &gch ) ;
          } // while ()

          gN_GT = true ;
        } // else
      } // else
    } // if ( InBuildFunction == 1 )
    // else gerrorline = 0 ;



    gfirstinexpression = false ;
    gSave_token = false ;
    if ( gN_GT ) GetToken() ;
    tenpenter = giftokenenter ;
    Resit() ;
    control_InBuildFunction = InBuildFunction() ;
  } // while( InBuildFunction() != 0 )

} // User_input()

bool Definition() {
  bool nowisrepeat = false ;
  SaveToken() ;


  if ( strcmp( gtemp, "void" ) == 0 ) { // 判斷它是不是芳炫
    strcpy( gtable[gtablenum].type, gtemp ) ;
    gSave_token = true ; // 可能要存東西
    gN_GT = true ;
    GetToken() ;
    if ( !Is_Identifier() ) return false ;
    // -----------------------------------------------------------
    for ( int i = 0 ; i < gtablenum ; i++ ) { // 判斷是否重複
      if ( strcmp( gtable[i].name, gtemp ) == 0 ) {
        gtable[i].repeatTorF = true ;
        nowisrepeat = true ; // 有找到重覆代表目前這個要複製上去的也有重複
      } // if( strcmp( gtable[i].name, gtemp ) == 0 )
    } // for ( int i = 0 ; i < gtablenum ; i++ )

    strcpy( gtable[gtablenum].name, gtemp ) ;
    if ( nowisrepeat ) gtable[gtablenum].repeatTorF = true ;
    else gtable[gtablenum].repeatTorF = false ;
    // ----------------------------------------------------------
    GetToken() ;
    if ( !Function_definition_without_ID() ) return false ;
    gtable[gtablenum].functionToF = true ;
    return true ;
  } // if()

  else if ( Type_specifier() ) { // 判斷它是否為5大類別之一
    strcpy( gtable[gtablenum].type, gtemp ) ;
    gN_GT = true ;              // 這個位置[type_specifier] Identifier function_definition_or_declarators
    gSave_token = true ; // 可能要存東西
    GetToken() ;
    if ( !Is_Identifier() ) return false ; // 判斷是否為Is_Identifier1不是的話就false
    // -----------------------------------------------------------
    for ( int i = 0 ; i < gtablenum ; i++ ) { // 判斷是否重複
      if ( strcmp( gtable[i].name, gtemp ) == 0 ) {
        gtable[i].repeatTorF = true ;
        nowisrepeat = true ; // 有找到重覆代表目前這個要複製上去的也有重複
      } // if( strcmp( gtable[i].name, gtemp ) == 0 )
    } // for ( int i = 0 ; i < gtablenum ; i++ )

    strcpy( gtable[gtablenum].name, gtemp ) ;
    if ( nowisrepeat ) gtable[gtablenum].repeatTorF = true ;
    else gtable[gtablenum].repeatTorF = false ;
    // ----------------------------------------------------------
    GetToken() ;  // type_specifier 這個位置[Identifier] function_definition_or_declarators
    gN_GT = false ;
    if ( !Function_definition_or_declarators() ) return false ;
    return true ; // type_specifier Identifier 這個位置[function_definition_or_declarators]
  } // else if()

  else
    return false ;
} // Definition()

bool Function_definition_or_declarators() {
  if ( strcmp( gtemp, "(" ) == 0 ) {
    if ( Function_definition_without_ID() ) {
      gtable[gtablenum].functionToF = true ;
      return true ;
    } // if ( Function_definition_without_ID() )
    else return false ;
  } // if( strcmp( gtemp, "(" ) == 0 )
  else {
    gSave_token = false ; // 因為不是芳炫所以可能不用存了
    gtable[gtablenum].functionToF = false ; // 因為不是芳炫所以是ident
    if ( Rest_of_declarators() ) return true ;
    else return false ;
  } // else

  return false ;
} // Function_definition_or_declarators()

bool Rest_of_declarators() {
  bool nowisrepeat = false ;
  if ( strcmp( gtemp, "[" ) == 0 ) { // 一開始先看是不是[
    gN_GT = true ;
    GetToken() ;
    if ( !Is_Constant() ) return false ; // 在判斷是不是Is_Constant
    sscanf( gtemp, "%d", &gtable[gtablenum].constantnum ) ;
    gN_GT = true ;
    GetToken() ;
    if ( strcmp( gtemp, "]" ) != 0 ) return false ;
    gN_GT = true ;
  } // if ( strcmp( gtemp, "[" ) == 0 )
  else {
    gtable[gtablenum].constantnum = 0 ;
    gN_GT = false ; // 因為可能沒用掉
  } // else

  if ( gN_GT ) GetToken() ;
  while ( strcmp( gtemp, "," ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Is_Identifier() ) return false ;
    // ---------------------------------------------------
    for ( int i = 0 ; i < gtablenum ; i++ ) { // 判斷是否重複
      if ( strcmp( gtable[i].name, gtemp ) == 0 ) {
        gtable[i].repeatTorF = true ;
        nowisrepeat = true ; // 有找到重覆代表目前這個要複製上去的也有重複
      } // if( strcmp( gtable[i].name, gtemp ) == 0 )
    } // for ( int i = 0 ; i < gtablenum ; i++ )

    gtablenum++ ;
    strcpy( gtable[gtablenum].type, gtable[gtablenum-1].type ) ;
    strcpy( gtable[gtablenum].name, gtemp ) ;
    gtable[gtablenum].functionToF = false ;
    if ( nowisrepeat ) gtable[gtablenum].repeatTorF = true ;
    else gtable[gtablenum].repeatTorF = false ;
    // ---------------------------------------------------
    gN_GT = true ;
    GetToken() ;
    if ( strcmp( gtemp, "[" ) == 0 ) {
      gN_GT = true ;
      GetToken() ;
      if ( !Is_Constant() ) return false ;
      sscanf( gtemp, "%d", &gtable[gtablenum].constantnum ) ;
      gN_GT = true ;
      GetToken() ;
      if ( strcmp( gtemp, "]" ) != 0 )  return false ;
      gN_GT = true ;
    } // if ( strcmp( gtemp, "[" ) == 0 )
    else {
      gtable[gtablenum].constantnum = 0 ;
      gN_GT = false ;
    } // else

    if ( gN_GT ) GetToken() ;
  } // while ( strcmp( gtemp, "," ) == 0 )

  gN_GT = false ;
  if ( strcmp( gtemp, ";" ) == 0 ) {
    gN_GT = true ;
    return true ;
  } // if ( strcmp( gtemp, ";" ) == 0 )

  else return false ;

} // Rest_of_declarators()

bool Function_definition_without_ID() {
  if ( strcmp( gtemp, "(" ) != 0 ) return false ;
  gN_GT = true ;
  GetToken() ;
  if ( strcmp( gtemp, "void" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
  } // if ( strcmp( gtemp, "void" ) = 0 )
  else if ( Type_specifier() ) {
    Setanewtable() ;
    if ( Formal_parameter_list() ) {
      if ( gN_GT ) GetToken() ;
    } // else if( Formal_parameter_list() )
    else return false ;
  } // else if ( Type_specifier() )

  if ( strcmp( gtemp, ")" ) != 0 ) return false ;
  gN_GT = true ;
  GetToken() ;
  if ( !Compound_statement() ) return false ;
  return true ;
} // Function_definition_without_ID()

bool Formal_parameter_list() {
  if ( !Type_specifier() ) return false ; // !!type_specifier這邊!! [ '&' ] Identifier [ '[' Constant ']' ]
  gN_GT = true ;
  GetToken() ;
  if ( strcmp( gtemp, "&" ) == 0 ) { // 是不是[ '&' ]
    gN_GT = true ;
    GetToken() ;
  } // if( strcmp( gtemp, "&" ) == 0 )
  else gN_GT = false ;
  if ( !Is_Identifier() ) return false ;
  SaveReg() ;
  gN_GT = true ;
  GetToken() ;

  if ( strcmp( gtemp, "[" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Is_Constant() ) return false ;
    gN_GT = true ;
    GetToken() ;
    if ( strcmp( gtemp, "]" ) != 0 ) return false ;
    gN_GT = true ;
  } // if ( strcmp( gtemp, "[" ) == 0 )
  else gN_GT = false ;

  if ( gN_GT ) GetToken() ;
  while ( strcmp( gtemp, "," ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Type_specifier() ) return false ;
    gN_GT = true ;
    GetToken() ;
    if ( strcmp( gtemp, "&" ) == 0 ) {
      gN_GT = true ;
      GetToken() ;
    } // if( strcmp( gtemp, "&" ) == 0 )
    else gN_GT = false ;

    if ( !Is_Identifier() ) return false ;
    SaveReg() ;
    gN_GT = true ;
    GetToken() ;
    if ( strcmp( gtemp, "[" ) == 0 ) {
      gN_GT = true ;
      GetToken() ;
      if ( !Is_Constant() ) return false ;
      gN_GT = true ;
      GetToken() ;
      if ( strcmp( gtemp, "]" ) != 0 )  return false ;
      gN_GT = true ;
    } // if ( strcmp( gtemp, "[" ) == 0 )
    else gN_GT = false ;
    if ( gN_GT ) GetToken() ;
  } // while ( strcmp( gtemp, "," ) == 0 )

  gN_GT = false ;
  return true ;
} // Formal_parameter_list()

bool Compound_statement() {
  if ( strcmp( gtemp, "{" ) != 0 ) return false ;
  Setanewtable() ;
  gN_GT = true ;
  GetToken() ;
  while ( Type_specifier() ) {
    if ( !Declaration() ) return false ;
    if ( gN_GT ) GetToken() ;
  } // while( Type_specifier() )

  while ( strcmp( gtemp, ";" ) == 0 || strcmp( gtemp, "return" ) == 0 || strcmp( gtemp, "if" ) == 0 ||
          strcmp( gtemp, "while" ) == 0 || strcmp( gtemp, "do" ) == 0 || strcmp( gtemp, "++" ) == 0 ||
          strcmp( gtemp, "--" ) == 0 || strcmp( gtemp, "(" ) == 0 || strcmp( gtemp, "{" ) == 0 ||
          Sign() || Is_Constant() || Is_Identifier() ||
          strcmp( gtemp, "cout" ) == 0 || strcmp( gtemp, "cin" ) == 0 ) {
    if ( !Statement() ) return false ;
    if ( gN_GT ) GetToken() ;
  } // while( strcmp( gtemp, ";" ) == 0 || strcmp( gtemp, "return" ) == 0 || strcmp( gtemp, "if" ) == 0 )


  if ( strcmp( gtemp, "}" ) == 0 ) {
    DeletTable() ;
    gN_GT = true ;
    return true ;
  } // if()
  else return false ;
} // Compound_statement()

bool Declaration() {
  if ( !Type_specifier() ) return false ; // [type_specifier] Identifier rest_of_declarators
  gN_GT = true ;
  GetToken() ;
  if ( !Is_Identifier() ) return false ; // type_specifier [Identifier] rest_of_declarators
  SaveReg() ;
  gN_GT = true ;
  GetToken() ;
  if ( !Rest_of_declarators_of_rage() ) return false ; // type_specifier Identifier [rest_of_declarators]
  return true ;
} // Declaration()
// ------------------------------------------------------------------------------

bool Rest_of_declarators_of_rage() {

  if ( strcmp( gtemp, "[" ) == 0 ) { // 一開始先看是不是[
    gN_GT = true ;
    GetToken() ;
    if ( !Is_Constant() ) return false ; // 在判斷是不是Is_Constant
    gN_GT = true ;
    GetToken() ;
    if ( strcmp( gtemp, "]" ) != 0 ) return false ;
    gN_GT = true ;
  } // if ( strcmp( gtemp, "[" ) == 0 )
  else {
    gN_GT = false ; // 因為可能沒用掉
  } // else

  if ( gN_GT ) GetToken() ;
  while ( strcmp( gtemp, "," ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Is_Identifier() ) return false ;
    SaveReg() ;
    gN_GT = true ;
    GetToken() ;
    if ( strcmp( gtemp, "[" ) == 0 ) {
      gN_GT = true ;
      GetToken() ;
      if ( !Is_Constant() ) return false ;
      gN_GT = true ;
      GetToken() ;
      if ( strcmp( gtemp, "]" ) != 0 )  return false ;
      gN_GT = true ;
    } // if ( strcmp( gtemp, "[" ) == 0 )
    else {
      gN_GT = false ;
    } // else

    if ( gN_GT ) GetToken() ;
  } // while ( strcmp( gtemp, "," ) == 0 )

  gN_GT = false ;
  if ( strcmp( gtemp, ";" ) == 0 ) {
    gN_GT = true ;
    return true ;
  } // if ( strcmp( gtemp, ";" ) == 0 )

  else return false ;

} // Rest_of_declarators_of_rage()

// --------------------------------------------------------------------------

// ----------------------------------第2部分-----------------------------------
bool Statement() {
  if ( strcmp( gtemp, ";" ) == 0 ) {
    gN_GT = true ;
    return true ; // 直接分號
  } // if ( strcmp( gtemp, ";" ) == 0 )

  else if ( strcmp( gtemp, "return" ) == 0 ) { // RETURN [ expression ] ';'
    gN_GT = true ;
    GetToken() ;
    if ( strcmp( gtemp, ";" ) != 0 ) {
      gN_GT = true ;
      if ( !Expression() ) return false ;
      if ( gN_GT ) GetToken() ;
    } // if ( strcmp( gtemp, ";" ) != 0 )

    if ( strcmp( gtemp, ";" ) == 0 ) {
      gN_GT = true ;
      return true ;
    } // if ( strcmp( gtemp, ";" ) == 0 )
    else return false ;
  } // else if ( strcmp( gtemp, "return" ) == 0 )

  else if ( strcmp( gtemp, "if" ) == 0 ) {  // IF '(' expression ')' statement [ ELSE statement ]
    gN_GT = true ;
    GetToken() ;
    if ( strcmp( gtemp, "(" ) != 0 ) return false ;
    gN_GT = true ;
    GetToken() ;
    if ( !Expression() ) return false ;
    if ( gN_GT ) GetToken() ;
    if ( strcmp( gtemp, ")" ) != 0 ) return false ;
    gN_GT = true ;
    GetToken() ;
    if ( !Statement() ) return false ;
    if ( gN_GT ) GetToken() ;
    if ( strcmp( gtemp, "else" ) == 0 ) {
      gN_GT = true ;
      GetToken() ;
      if ( !Statement() ) return false ;
      else return true ;
    } // if()

    else {
      gN_GT = false ;
      return true ;
    } // else
  } // else if ( strcmp( gtemp, "if" ) == 0 )

  else if ( strcmp( gtemp, "while" ) == 0 ) { // WHILE '(' expression ')' statement
    gN_GT = true ;
    GetToken() ;
    if ( strcmp( gtemp, "(" ) != 0 ) return false ;
    gN_GT = true ;
    GetToken() ;
    if ( !Expression() ) return false ;
    if ( gN_GT ) GetToken() ;
    if ( strcmp( gtemp, ")" ) != 0 ) return false ;
    gN_GT = true ;
    GetToken() ;
    if ( !Statement() ) return false ;
    return true ;
  } // else if ( strcmp( gtemp, "while" ) == 0 )

  else if ( strcmp( gtemp, "do" ) == 0 ) { //  DO statement WHILE '(' expression ')' ';'
    gN_GT = true ;
    GetToken() ;
    if ( !Statement() ) return false ;
    if ( gN_GT ) GetToken() ;
    if ( strcmp( gtemp, "while" ) != 0 ) return false ;
    gN_GT = true ;
    GetToken() ;
    if ( strcmp( gtemp, "(" ) != 0 ) return false ;
    gN_GT = true ;
    GetToken() ;
    if ( !Expression() ) return false ;
    if ( gN_GT ) GetToken() ;
    if ( strcmp( gtemp, ")" ) != 0 ) return false ;
    gN_GT = true ;
    GetToken() ;
    if ( strcmp( gtemp, ";" ) == 0 ) {
      gN_GT = true ;
      return true ;
    } // if ( strcmp( gtemp, ";" ) == 0 )
    else return false ;
  } // else if ( strcmp( gtemp, "do" ) == 0 )

  else if ( strcmp( gtemp, "{" ) == 0 ) { // compound_statement
    if ( !Compound_statement() ) return false ;
    else return true ;
  } // else if ( strcmp( gtemp, "{" ) == 0 )

  else if ( strcmp( gtemp, "cout" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( Cout() ) return true ;
    else return false ;
  } // else if ( strcmp( gtemp, "ListAllVariables" ) == 0 )

  else if ( strcmp( gtemp, "cin" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( Cin() ) return true ;
    else return false ;
  } // else if ( strcmp( gtemp, "ListAllVariables" ) == 0 )

  else if ( Expression() ) { // expression ';'
    if ( gN_GT ) GetToken() ;
    if ( strcmp( gtemp, ";" ) == 0 ) {
      gN_GT = true ;
      return true ;
    } // if ( strcmp( gtemp, ";" ) == 0 )
    else return false ;
  } // else if( Expression() )

  else return false ;
} // Statement()

bool Expression() {
  if ( !Basic_expression() ) return false ; // 不是Basic_expression
  if ( gN_GT ) GetToken() ; // 確定要不要拿
  if ( strcmp( gtemp, "," ) == 0 ||  strcmp( gtemp, "?" ) == 0 ) { // 看是不是Rest_of_expression
    if ( Rest_of_expression() ) return true ;
    else return false ;
  } // if ( Rest_of_expression() )
  else {
    gN_GT = false ; // 這邊還要再做確定
    return true ;
  } // else
} // Expression()

bool Rest_of_expression() {
  if ( strcmp( gtemp, "," ) == 0 ) {
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( !Basic_expression() ) return false ; // 不是Basic_expression
    if ( gN_GT ) GetToken() ;
    if ( strcmp( gtemp, "," ) == 0 || strcmp( gtemp, "?" ) == 0 ) { // 看是不是Rest_of_expression
      if ( Rest_of_expression() ) return true ;
      else return false ;
    } // if (  strcmp( gtemp, "," ) == 0 ||  strcmp( gtemp, "?" ) == 0 )
    else {
      gN_GT = false ; // 沒用掉Token
      return true ;
    } // else
  } // if ( strcmp( gtemp, "," ) == 0 )

  else if ( strcmp( gtemp, "?" ) == 0 ) {
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( !Expression() ) return false ; // 不是Basic_expression
    if ( gN_GT ) GetToken() ;
    if ( strcmp( gtemp, ":" ) != 0 ) return false ; // 不是:
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;

    if ( !Basic_expression() ) return false ; // 不是Basic_expression
    if ( gN_GT ) GetToken() ;

    if ( strcmp( gtemp, "," ) == 0 ||  strcmp( gtemp, "?" ) == 0 ) { // 看是不是Rest_of_expression
      if ( Rest_of_expression() ) return true ;
      else return false ;
    } // if (  strcmp( gtemp, "," ) == 0 ||  strcmp( gtemp, "?" ) == 0 )
    else {
      gN_GT = false ; // 沒用掉Token
      return true ;
    } // else
  } // else if ( strcmp( gtemp, "?" ) == 0 )

  else return false ;
} // Rest_of_expression()

bool Basic_expression() {
  if ( Is_Identifier() ) {
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    if ( gfirstinexpression ) {
      if ( !Check_Not_Function_Id() ) return false ;
    } // if ()

    else {
      if ( Check_Not_Function_Id() || InsideIDcheck() ) ;
      else return false ;
    } // else

    GetToken() ;
    if ( Rest_of_Identifier_started_basic_exp() ) return true ;
    else return false ;
  } // if ( Is_Identifier() )

  else if ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 ) {
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    while ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 ) {
      GetToken() ;
    } // while ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 )

    if ( !Is_Identifier() ) return false ;
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( Rest_of_PPMM_Identifier_started_basic_exp() ) return true ;
    else return false ;
  } // else if ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 )

  else if ( Sign() ) {
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    while ( Sign() ) {
      GetToken() ;
    } // while ( Sign() )

    if ( Signed_basic_expression() ) return true ;
    else return false ;
  } // else if ( Sign() )

  else if ( Is_Constant() ) {
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( Rest_of_maybe_logical_OR_exp() ) return true ;
    else return false ;
  } // else if ( Is_Constant() )

  else if ( strcmp( gtemp, "(" ) == 0 ) {
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( !Expression() ) return false ;
    if ( gN_GT ) GetToken() ;
    if ( strcmp( gtemp, ")" ) != 0 ) return false ;
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( Rest_of_maybe_logical_OR_exp() ) return true ;
    else return false ;
  } // else if ( strcmp( gtemp, "(" ) == 0 )

  else return false ;
} // Basic_expression()

bool Rest_of_Identifier_started_basic_exp() {
  if ( strcmp( gtemp, "(" ) == 0 ) {
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( Is_Constant() || Sign() || Is_Identifier() || strcmp( gtemp, "++" ) == 0 ||
         strcmp( gtemp, "--" ) == 0 || strcmp( gtemp, "(" ) == 0  ) { // 先判斷它到底
      if ( Actual_parameter_list() ) {
        if ( gN_GT ) GetToken() ;        // 會不會進去Actual_parameter_list()
      } // if ( Actual_parameter_list() )
      else return false ; // 如果真的進去了 那錯就是一定錯
    } // if( Is_Constant() || Sign() || Is_Identifier() || strcmp( gtemp, "++" ) == 0 )

    if ( strcmp( gtemp, ")" ) != 0 ) return false ;
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( !Rest_of_maybe_logical_OR_exp() ) return false ;
    return true ;
  } // if ( strcmp( gtemp, "(" ) == 0 )

  else {
    if ( strcmp( gtemp, "[" ) == 0 ) {
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      GetToken() ;
      if ( !Expression() ) return false ; // 不是Expression
      if ( gN_GT ) GetToken() ;
      if ( strcmp( gtemp, "]" ) != 0 ) return false ; // 不是]
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    } // if ( strcmp( gtemp, "[" ) == 0 )
    else gN_GT = false ; // 因為沒用過
    if ( gN_GT ) GetToken() ;

    if ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 ) {
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    } // if ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 )
    else gN_GT = false ; // 因為沒用過
    if ( gN_GT ) GetToken() ;
    if ( Assignment_operator() ) { // ( assignment_operator basic_expression )
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      GetToken() ;
      if ( !Basic_expression() ) return false ; // 不是Basic_expression
      return true ;
    } // if ( Assignment_operator() )

    else if ( Rest_of_maybe_logical_OR_exp() ) return true ;

    else return false ;
  } // else
} // Rest_of_Identifier_started_basic_exp()

bool Rest_of_PPMM_Identifier_started_basic_exp() {
  if ( strcmp( gtemp, "(" ) == 0 ) {
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( Is_Constant() || Sign() || Is_Identifier() || strcmp( gtemp, "++" ) == 0 ||
         strcmp( gtemp, "--" ) == 0 || strcmp( gtemp, "(" ) == 0  ) { // 先判斷它到底
      if ( Actual_parameter_list() ) {
        if ( gN_GT ) GetToken() ;        // 會不會進去Actual_parameter_list()
      } // if ( Actual_parameter_list() )
      else return false ; // 如果真的進去了 那錯就是一定錯
    } // if( Is_Constant() || Sign() || Is_Identifier() || strcmp( gtemp, "++" ) == 0 )

    if ( strcmp( gtemp, ")" ) != 0 ) return false ;
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( !Rest_of_maybe_logical_OR_exp() ) return false ;
    return true ;
  } // if ( strcmp( gtemp, "(" ) == 0 )

  else {
    if ( strcmp( gtemp, "[" ) == 0 ) {
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      GetToken() ;
      if ( !Expression() ) return false ; // 不是Expression
      if ( gN_GT ) GetToken() ;
      if ( strcmp( gtemp, "]" ) != 0 ) return false ; // 不是]
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    } // if ( strcmp( gtemp, "[" ) == 0 )
    else gN_GT = false ; // 因為沒用過
    if ( gN_GT ) GetToken() ;

    if ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 ) {
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    } // if ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 )
    else gN_GT = false ; // 因為沒用過
    if ( gN_GT ) GetToken() ;

    if ( Assignment_operator() ) { // ( assignment_operator basic_expression )
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      GetToken() ;
      if ( !Basic_expression() ) return false ; // 不是Basic_expression
      return true ;
    } // if ( Assignment_operator() )

    else if ( Rest_of_maybe_logical_OR_exp() ) return true ;

    else return false ;
  } // else
} // Rest_of_PPMM_Identifier_started_basic_exp()

bool Signed_basic_expression() {
  if ( Is_Identifier() ) { // Identifier rest_of_Identifier_started_signed_basic_exp
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    if ( gfirstinexpression ) {
      if ( !Check_Not_Function_Id() ) return false ;
    } // if ()

    else {
      if ( Check_Not_Function_Id() || InsideIDcheck() ) ;
      else return false ;
    } // else

    GetToken() ;
    if ( Rest_of_Identifier_started_basic_exp() ) return true ;
    else return false ;
  } // if ( Is_Identifier() )

  else if ( Is_Constant() ) { //  Constant rest_of_maybe_logical_OR_exp
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( Rest_of_maybe_logical_OR_exp() ) return true ;
    else return false ;
  } // else if ( Is_Constant() )

  else if ( strcmp( gtemp, "(" ) == 0 ) { // '(' expression ')' rest_of_maybe_logical_OR_exp
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( !Expression() ) return false ;
    if ( gN_GT )  GetToken() ;
    if ( strcmp( gtemp, ")" ) != 0 ) return false ;
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( Rest_of_maybe_logical_OR_exp() ) return true ;
    else return false ;
  } // else if ( strcmp( gtemp, "(" ) == 0 )

  else return false ;
} // Signed_basic_expression()

bool Rest_of_Identifier_started_signed_basic_exp() {

  if ( strcmp( gtemp, "(" ) == 0 ) { // '(' [ actual_parameter_list ] ')'
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( Is_Constant() || Sign() || Is_Identifier() || strcmp( gtemp, "++" ) == 0 ||
         strcmp( gtemp, "--" ) == 0 || strcmp( gtemp, "(" ) == 0  ) { // 先判斷它到底
      if ( Actual_parameter_list() ) {
        if ( gN_GT ) GetToken() ; // 會不會進去Actual_parameter_list()
      } // if ( Actual_parameter_list() )
      else return false ; // 如果真的進去了 那錯就是一定錯
    } // if ( Is_Constant() || Sign() || Is_Identifier() || strcmp( gtemp, "++" ) == 0 )

    if ( strcmp( gtemp, ")" ) != 0 ) return false ;
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( !Rest_of_maybe_logical_OR_exp() ) return false ;
    return true ;
  } // if ( strcmp( gtemp, "(" ) == 0 )

  else {
    if ( strcmp( gtemp, "[" ) == 0 ) {
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      GetToken() ;
      if ( !Expression() ) return false ; // 不是Expression
      if ( gN_GT ) GetToken() ;
      if ( strcmp( gtemp, "]" ) != 0 ) return false ; // 不是]
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    } // if ( strcmp( gtemp, "[" ) == 0 )
    else gN_GT = false ; // 因為沒用過
    if ( gN_GT ) GetToken() ;

    if ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 ) {
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    } // if ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 )
    else gN_GT = false ; // 因為沒用過
    if ( gN_GT ) GetToken() ;

    if ( Rest_of_maybe_logical_OR_exp() ) return true ;
    else return false ;
  } // else

} // Rest_of_Identifier_started_signed_basic_exp()

bool Actual_parameter_list() {
  if ( !Non_comma_expression() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "," ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Non_comma_expression() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gtemp, "," ) == 0 )

  gN_GT = false ;
  return true ;
} // Actual_parameter_list()

bool Non_comma_expression() {
  if ( !Basic_expression() ) return false ; // 不是Basic_expression
  if ( gN_GT ) GetToken() ; // 確定要不要拿
  if ( strcmp( gtemp, "?" ) == 0 ) { // 要確定是否會不會進去
    if ( Rest_of_non_comma_expression() ) return true ; // Rest_of_non_comma_expression
    else return false ;
  } // if ( Rest_of_expression() )
  else {
    gN_GT = false ; // 這邊還要再做確定
    return true ;
  } // else
} // Non_comma_expression()

bool Rest_of_non_comma_expression() {
  if ( strcmp( gtemp, "?" ) != 0 ) return false ; // 不是?
  gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  GetToken() ;
  if ( !Expression() ) return false ; // 不是Basic_expression
  if ( gN_GT ) GetToken() ;
  if ( strcmp( gtemp, ":" ) != 0 ) return false ; // 不是:
  gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  GetToken() ;
  if ( !Basic_expression() ) return false ; // 不是Basic_expression
  if ( gN_GT ) GetToken() ;
  if ( strcmp( gtemp, "?" ) == 0 ) { // 看是否是Rest_of_non_comma_expression
    if ( Rest_of_non_comma_expression() ) return true ;
    else return false ;
  } // if (  strcmp( gtemp, "," ) == 0 ||  strcmp( gtemp, "?" ) == 0 )
  else {
    gN_GT = false ; // 沒用掉Token
    return true ;
  } // else
} // Rest_of_non_comma_expression()


// --------------------------------------------------------------------------

// --------------------第3部分-----------------------------------------------

bool Rest_of_maybe_logical_OR_exp() {
  if ( !Rest_of_maybe_logical_AND_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "||" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_logical_AND_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gtemp, "||" ) == 0 )

  gN_GT = false ;
  return true ;
} // Rest_of_maybe_logical_OR_exp()

bool Maybe_logical_AND_exp() {
  if ( !Maybe_bit_OR_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "&&" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_bit_OR_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gtemp, "&&" ) == 0 )

  gN_GT = false ;
  return true ;
} // Maybe_logical_AND_exp()

bool Rest_of_maybe_logical_AND_exp() {
  if ( !Rest_of_maybe_bit_OR_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "&&" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_bit_OR_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gtemp, "&&" ) == 0 )

  gN_GT = false ;
  return true ;
} // Rest_of_maybe_logical_AND_exp()

bool Maybe_bit_OR_exp() {
  if ( !Maybe_bit_ex_OR_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "|" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_bit_ex_OR_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gtemp, "|" ) == 0 )

  gN_GT = false ;
  return true ;
} // Maybe_bit_OR_exp()

bool Rest_of_maybe_bit_OR_exp() {
  if ( !Rest_of_maybe_bit_ex_OR_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "|" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_bit_ex_OR_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gtemp, "|" ) == 0 )

  gN_GT = false ;
  return true ;
} // Rest_of_maybe_bit_OR_exp()

bool Maybe_bit_ex_OR_exp() {
  if ( !Maybe_bit_AND_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "^" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_bit_AND_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gtemp, "^" ) == 0 )

  gN_GT = false ;
  return true ;
} // Maybe_bit_ex_OR_exp()

bool Rest_of_maybe_bit_ex_OR_exp() {
  if ( !Rest_of_maybe_bit_AND_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "^" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_bit_AND_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gtemp, "^" ) == 0 )

  gN_GT = false ;
  return true ;
} // Rest_of_maybe_bit_ex_OR_exp()

bool Maybe_bit_AND_exp() {
  if ( !Maybe_equality_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "&" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_equality_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gtemp, "&" ) == 0 )

  gN_GT = false ;
  return true ;
} // Maybe_bit_AND_exp()

bool Rest_of_maybe_bit_AND_exp() {
  if ( !Rest_of_maybe_equality_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "&" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_equality_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gtemp, "&" ) == 0 )

  gN_GT = false ;
  return true ;
} // Rest_of_maybe_bit_AND_exp()

bool Maybe_equality_exp() {
  if ( !Maybe_relational_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "==" ) == 0 || strcmp( gtemp, "!=" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_relational_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gtemp, "==" ) == 0 || strcmp( gtemp, "!=" ) == 0 )

  gN_GT = false ;
  return true ;
} // Maybe_equality_exp()

bool Rest_of_maybe_equality_exp() {
  if ( !Rest_of_maybe_relational_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "==" ) == 0 || strcmp( gtemp, "!=" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_relational_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gtemp, "==" ) == 0 || strcmp( gtemp, "!=" ) == 0 )

  gN_GT = false ;
  return true ;
} // Rest_of_maybe_equality_exp()

bool Maybe_relational_exp() {
  if ( !Maybe_shift_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "<" ) == 0 || strcmp( gtemp, ">" ) == 0 ||
          strcmp( gtemp, "<=" ) == 0 || strcmp( gtemp, ">=" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_shift_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while( strcmp( gtemp, "<" ) == 0 || strcmp( gtemp, ">" ) == 0 ||
    // strcmp( gtemp, "<=" ) == 0 || strcmp( gtemp, ">=" ) == 0 )

  gN_GT = false ;
  return true ;
} // Maybe_relational_exp()

bool Rest_of_maybe_relational_exp() {
  if ( !Rest_of_maybe_shift_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "<" ) == 0 || strcmp( gtemp, ">" ) == 0 ||
          strcmp( gtemp, "<=" ) == 0 || strcmp( gtemp, ">=" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_shift_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while ()

  gN_GT = false ;
  return true ;
} // Rest_of_maybe_relational_exp()

bool Maybe_shift_exp() {
  if ( !Maybe_additive_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "<<" ) == 0 || strcmp( gtemp, ">>" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_additive_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while( strcmp( gtemp, "<<" ) == 0 || strcmp( gtemp, ">>" ) == 0 )

  gN_GT = false ;
  return true ;
} // Maybe_shift_exp()

bool Rest_of_maybe_shift_exp() {
  if ( !Rest_of_maybe_additive_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "<<" ) == 0 || strcmp( gtemp, ">>" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_additive_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while( strcmp( gtemp, "<<" ) == 0 || strcmp( gtemp, ">>" ) == 0 )

  gN_GT = false ;
  return true ;
} // Rest_of_maybe_shift_exp()

bool Maybe_additive_exp() {
  if ( !Maybe_mult_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "+" ) == 0 || strcmp( gtemp, "-" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_mult_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while( strcmp( gtemp, "+" ) == 0 || strcmp( gtemp, "-" ) == 0 )

  gN_GT = false ;
  return true ;
} // Maybe_additive_exp()

bool Rest_of_maybe_additive_exp() {
  if ( !Rest_of_maybe_mult_exp() ) return false ; // 不等於的話就不能跑到下面迴圈了
  if ( gN_GT == true ) GetToken() ; // 判斷要不要拿
  while ( strcmp( gtemp, "+" ) == 0 || strcmp( gtemp, "-" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Maybe_mult_exp() ) return false ;
    if ( gN_GT == true ) GetToken() ;
  } // while( strcmp( gtemp, "+" ) == 0 || strcmp( gtemp, "-" ) == 0 )

  gN_GT = false ;
  return true ;
} // Rest_of_maybe_additive_exp()

bool Maybe_mult_exp()  {
  if ( Unary_exp() ) {
    if ( gN_GT ) GetToken() ;
    if ( Rest_of_maybe_mult_exp() ) return true ;
    else return false ;
  } // if()

  else
    return false ;
} // Maybe_mult_exp()

bool Rest_of_maybe_mult_exp() {
  while ( strcmp( gtemp, "*" ) == 0 || strcmp( gtemp, "/" ) == 0 ||
          strcmp( gtemp, "%" ) == 0 ) {
    gN_GT = true ;
    GetToken() ;
    if ( !Unary_exp() ) return false ; // 不為Unary_exp
    if ( gN_GT == true ) GetToken() ;
  } // while ( strcmp( gToken, "*" ) == 0 || strcmp( gToken, "/" ) == 0 || strcmp( gToken, "%" ) == 0 )

  gN_GT = false ; // 出來迴圈代表沒用到
  return true ;
} // Rest_of_maybe_mult_exp()

// ------------------------------------------------------------------------------

bool Unary_exp()  {
  if ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 )  {
    gN_GT = true ;
    while ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 ) {
      GetToken() ;
    } // while ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 )

    if ( !Is_Identifier() ) return false ;
    gN_GT = true ;
    if ( gfirstinexpression ) {
      if ( !Check_Not_Function_Id() ) return false ;
    } // if ()

    else {
      if ( Check_Not_Function_Id() || InsideIDcheck() ) ;
      else return false ;
    } // else

    GetToken() ;
    if ( strcmp( gtemp, "[" ) == 0 ) {
      gN_GT = true ;
      GetToken() ;
      if ( !Expression() ) return false ;
      if ( gN_GT ) GetToken() ;
      if ( strcmp( gtemp, "]" ) != 0 ) return false ;
      gN_GT = true ;
      return true ;
    } // if( strcmp( gtemp, "[" ) == 0 )

    else {
      gN_GT = false ;
      return true ;
    } // else

  } // if ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 )

  if ( Sign() ) { // 是sign
    gN_GT = true ;
    while ( Sign() ) {
      GetToken() ; // 要拿到不是sign為止
    } // while( Sign() )
  } // if( Sign() )

  if ( !Signed_unary_exp() ) return false ; // 不是Signed_unary_exp
  return true ;
} // Unary_exp()

bool Signed_unary_exp() {
  if ( Is_Identifier() )  { // 是不是Identifier
    gN_GT = true ;
    if ( gfirstinexpression ) {
      if ( !Check_Not_Function_Id() ) return false ;
    } // if ()

    else {
      if ( Check_Not_Function_Id() || InsideIDcheck() ) ;
      else return false ;
    } // else

    GetToken() ;
    if ( strcmp( gtemp, "(" ) == 0 || strcmp( gtemp, "[" ) == 0 ||
         strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 ) {
      if ( Rest_of_Identifier_started_unary_exp() ) return true ; // [ Rest_of_Identifier_started_unary_exp ]
      else {   // 如果不是Rest_of_Identifier_started_unary_exp要設成false
        return false ;
      } // else
    } // if()
    else {
      gN_GT = false ;
      return true ;
    } // else
  } // if ()

  else if ( Is_Constant() ) {
    gN_GT = true ;
    return true ; // 是不是Constant
  } // else if ( Is_Constant() )

  else if ( strcmp( gtemp, "(" ) == 0 ) {   // ( Expression )
    gN_GT = true ;
    GetToken() ;
    if ( !Expression() ) return false ;
    if ( gN_GT ) GetToken() ;
    if ( strcmp( gtemp, ")" ) != 0 ) return false ;
    gN_GT = true ;
    return true ;
  } // else if ()

  else return false ;
} // Signed_unary_exp()

bool Rest_of_Identifier_started_unary_exp() {
  if ( strcmp( gtemp, "(" ) == 0 ) { // '(' [ actual_parameter_list ] ')'
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    GetToken() ;
    if ( Is_Constant() || Sign() || Is_Identifier() || strcmp( gtemp, "++" ) == 0 ||
         strcmp( gtemp, "--" ) == 0 || strcmp( gtemp, "(" ) == 0  ) { // 先判斷它到底
      if ( Actual_parameter_list() ) {
        if ( gN_GT ) GetToken() ; // 會不會進去Actual_parameter_list()
      } // if ( Actual_parameter_list() )
      else return false ; // 如果真的進去了 那錯就是一定錯
    } // if ( Is_Constant() || Sign() || Is_Identifier() || strcmp( gtemp, "++" ) == 0 )

    if ( strcmp( gtemp, ")" ) != 0 ) return false ;
    gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    return true ;
  } // if ( strcmp( gtemp, "(" ) == 0 )
  // ------------------------------------------------
  else {
    if ( strcmp( gtemp, "[" ) == 0 ) {
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      GetToken() ;
      if ( !Expression() ) return false ; // 不是Expression
      if ( gN_GT ) GetToken() ;
      if ( strcmp( gtemp, "]" ) != 0 ) return false ; // 不是]
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    } // if ( strcmp( gtemp, "[" ) == 0 )
    else gN_GT = false ; // 因為沒用過

    if ( gN_GT ) GetToken() ;

    if ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 ) {
      gN_GT = true ; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    } // if ( strcmp( gtemp, "++" ) == 0 || strcmp( gtemp, "--" ) == 0 )
    else gN_GT = false ; // 因為沒用過

    return true ;
  } // else

} // Rest_of_Identifier_started_unary_exp()




